# Product Requirements Document: Superrustico.com MVP

## Goal

To guide an AI assistant in creating a detailed Product Requirements Document (PRD) in Markdown format, based on an initial user prompt. The PRD should be clear, actionable, and suitable for a junior developer to understand and implement the feature.

## Process

1.  **Receive Initial Prompt:** The user provides a brief description or request for a new feature or functionality.
2.  **Ask Clarifying Questions:** Before writing the PRD, the AI *must* ask clarifying questions to gather sufficient detail. The goal is to understand the "what" and "why" of the feature, not necessarily the "how" (which the developer will figure out).
3.  **Generate PRD:** Based on the initial prompt and the user's answers to the clarifying questions, generate a PRD using the structure outlined below.
4.  **Save PRD:** Save the generated document as `prd-[feature-name].md` inside the `/tasks` directory.

## Clarifying Questions (Examples)

The AI should adapt its questions based on the prompt, but here are some common areas to explore:

*   **Problem/Goal:** "What problem does this feature solve for the user?" or "What is the main goal we want to achieve with this feature?"
*   **Target User:** "Who is the primary user of this feature?"
*   **Core Functionality:** "Can you describe the key actions a user should be able to perform with this feature?"
*   **User Stories:** "Could you provide a few user stories? (e.g., As a \[type of user], I want to \[perform an action] so that \[benefit].)"
*   **Acceptance Criteria:** "How will we know when this feature is successfully implemented? What are the key success criteria?"
*   **Scope/Boundaries:** "Are there any specific things this feature *should not* do (non-goals)?"
*   **Data Requirements:** "What kind of data does this feature need to display or manipulate?"
*   **Design/UI:** "Are there any existing design mockups or UI guidelines to follow?" or "Can you describe the desired look and feel?"
*   **Edge Cases:** "Are there any potential edge cases or error conditions we should consider?"

## PRD Structure

The generated PRD should include the following sections:

1.  **Introduction/Overview:** Briefly describe the feature and the problem it solves. State the goal.
2.  **Goals:** List the specific, measurable objectives for this feature.
3.  **User Stories:** Detail the user narratives describing feature usage and benefits.
4.  **Functional Requirements:** List the specific functionalities the feature must have. Use clear, concise language (e.g., "The system must allow users to upload a profile picture."). Number these requirements.
5.  **Non-Goals (Out of Scope):** Clearly state what this feature will *not* include to manage scope.
6.  **Design Considerations (Optional):** Link to mockups, describe UI/UX requirements, or mention relevant components/styles if applicable.
7.  **Technical Considerations (Optional):** Mention any known technical constraints, dependencies, or suggestions (e.g., "Should integrate with the existing Auth module").
8.  **Success Metrics:** How will the success of this feature be measured? (e.g., "Increase user engagement by 10%", "Reduce support tickets related to Î§").
9.  **Open Questions:** List any remaining questions or areas needing further clarification.

## Target Audience

Assume the primary reader of the PRD is a **junior developer**. Therefore, requirements should be explicit, unambiguous, and avoid jargon where possible. Provide enough detail for them to understand the feature's purpose and core logic.

## Output

*   **Format:** Markdown (`.md`)
*   **Location:** `/tasks/`
*   **Filename:** `prd-[feature-name].md`

## Final instructions

1.  Do NOT start implementing the PRD
2.  Make sure to ask the user clarifying questions
3.  Take the user's answers to the clarifying questions and improve the PRD

---

# PRD: Superrustico.com MVP

## 1. Introduction/Overview

This document outlines the requirements for the Minimum Viable Product (MVP) of superrustico.com. The initial version of the website will be a simple, single-page experience designed to create a specific mood and online presence. The core of this page will be a single, auto-playing video. This MVP serves as the foundation for future development, which will include more complex features.

## 2. Goals

*   Launch a live, publicly accessible website at the superrustico.com domain.
*   Present a clean, focused, and visually impactful landing page.
*   Establish the initial technical infrastructure that can be built upon for future features.
*   Ensure the page is responsive and displays correctly on modern web browsers and devices.

## 3. User Stories

*   **As a visitor,** I want to see a visually engaging video as soon as the page loads so that I can understand the brand's aesthetic.
*   **As the site owner,** I want to have a simple yet professional web presence that I can direct people to.
*   **As a future developer,** I want the initial codebase to be clean and well-structured, following the guidelines in the bootstrap document, to make future expansion easier.

## 4. Functional Requirements

1.  The website must be accessible at the `superrustico.com` domain.
2.  The website will consist of a single HTML page.
3.  The page background color must be black (`#000000`).
4.  An MP4 video file must be displayed, centered both horizontally and vertically on the page.
5.  The video should start playing automatically once the page is loaded.
6.  The video should loop continuously.
7.  There will be no video controls (play, pause, volume, etc.) visible to the user.
8.  There will be no other text, images, links, or navigation on the page.

## 5. Non-Goals (Out of Scope)

*   **User Accounts:** User registration, login, or profiles will not be implemented.
*   **Image Sharing:** Functionality for users to upload or view images is not part of the MVP.
*   **Multiple Pages:** This version will be a single-page site only.
*   **Databases:** Beyond what is set up by default in the bootstrap process, no database interaction is required for this MVP.
*   **Testing:** Automated tests are not required for this initial version.
*   **Mobile App:** Any mobile app development is explicitly out of scope.

## 6. Design Considerations

*   **Video:** The provided MP4 video is the sole design element.
*   **Layout:** The layout will be minimalist, with the video being the focal point on a black background. MUI can be used for basic layout structure if needed to ensure centering. [6, 9, 10]

## 7. Technical Considerations

*   **Frontend Framework:** The website will be built using Next.js. [1, 3, 7]
*   **Styling:** MUI can be used for any necessary styling or layout, though custom CSS for centering might be sufficient. [6, 9, 10]
*   **Hosting:** The website will be deployed and hosted on Vercel. [4, 8]
*   **Backend & Database:** The initial setup will follow the `bootstrap.md` guide, which includes setting up Supabase. [2, 5, 13] While no explicit database functionality is needed for the MVP, the infrastructure should be in place.
*   **Code Structure:** The project structure should adhere to the `bootstrap.md` instructions for the `web` directory.
*   **Domain:** The domain `superrustico.com` needs to be correctly configured to point to the Vercel deployment. [4]

## 8. Success Metrics

*   The website is live and accessible at superrustico.com.
*   The page loads and displays the video correctly on the latest versions of major browsers (Chrome, Firefox, Safari, Edge).
*   The Vercel deployment pipeline is successfully set up.
*   The foundational Supabase project is linked and ready for future use. [2, 5]

## 9. Open Questions

*   Where is the final MP4 video file located, and what is its filename?
*   Are there any specific performance requirements for video loading and playback?